[{"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\index.js":"1","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\App.js":"2","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\reportWebVitals.js":"3","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\Register.js":"5","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\Login.js":"6","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\providers\\UserProfileProvider.js":"7","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\InventoryList.js":"8","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\Dashboard.js":"9","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\ItemForm.js":"10","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\EditProfile.js":"11","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\ItemCard.js":"12"},{"size":646,"mtime":1612892652908,"results":"13","hashOfConfig":"14"},{"size":429,"mtime":1612891258668,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":1374,"mtime":1612891602372,"results":"17","hashOfConfig":"14"},{"size":13089,"mtime":1613015287431,"results":"18","hashOfConfig":"14"},{"size":3927,"mtime":1612135355380,"results":"19","hashOfConfig":"14"},{"size":3606,"mtime":1612135506061,"results":"20","hashOfConfig":"14"},{"size":13466,"mtime":1613684434536,"results":"21","hashOfConfig":"14"},{"size":20725,"mtime":1613755533808,"results":"22","hashOfConfig":"14"},{"size":39106,"mtime":1614192976694,"results":"23","hashOfConfig":"14"},{"size":9009,"mtime":1614032515982,"results":"24","hashOfConfig":"14"},{"size":3880,"mtime":1614033661994,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"12fai8",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\index.js",[],["54","55"],"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\App.js",[],"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\reportWebVitals.js",[],"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\Register.js",[],"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\Login.js",[],"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\InventoryList.js",[],"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\Dashboard.js",["56"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Bar, Doughnut, Line, Pie } from 'react-chartjs-2';\r\nimport { Button, Container, FormControl, Nav, Navbar, Row } from 'react-bootstrap'\r\nimport { toast } from \"react-toastify\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./Inventory.css\";\r\n\r\nconst Dashboard = () => {\r\n    const { logout } = useContext(UserProfileContext);\r\n\r\n    const history = useHistory();\r\n\r\n    const [quantity, setQuantity] = useState([])\r\n    const [price, setPrice] = useState([])\r\n    const [month, setMonth] = useState([])\r\n    const [quantityYTD, setTotalQuantityYTD] = useState(0)\r\n    const [priceYTD, setTotalPriceYTD] = useState(0)\r\n\r\n    const logoutAndReturn = () => {\r\n        return logout().then(() => {\r\n            toast.dark(\"You are now logged out\");\r\n            history.push(\"/login\");\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch(\"/api/item/quantity\")\r\n            .then((res) => res.json())\r\n            .then((quantity) => {\r\n                setQuantity(quantity)\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetch(\"/api/item/price\")\r\n            .then((res) => res.json())\r\n            .then((price) => {\r\n                setPrice(price);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetch(\"/api/item/month\")\r\n            .then((res) => res.json())\r\n            .then((month) => {\r\n                setMonth(month);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetch(\"/api/item/quantity\")\r\n            .then((res) => res.json())\r\n            .then((quantity) => {\r\n                if (quantityYTD === 0) {\r\n                    console.log(`quantityYTD = ${quantityYTD}`)\r\n                    setQuantity(quantity);\r\n                } else {\r\n                    console.log(`quantityYTD = ${quantityYTD}`)\r\n                    const quantityFloor = quantity.filter(quantity => quantity.totalQuantity >= quantityYTD)\r\n                    setQuantity(quantityFloor);\r\n                }\r\n            });\r\n    }, [quantity, quantityYTD]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"/api/item/price\")\r\n            .then((res) => res.json())\r\n            .then((price) => {\r\n                if (priceYTD === 0) {\r\n                    console.log(`quantityYTD = ${quantityYTD}`)\r\n                    setPrice(price);\r\n                } else {\r\n                    console.log(`quantityYTD = ${quantityYTD}`)\r\n                    const priceFloor = price.filter(price => price.totalPrice >= priceYTD)\r\n                    setPrice(priceFloor);\r\n                }\r\n            });\r\n    }, [quantity, quantityYTD]);\r\n\r\n    //Total # of Items by Department YTD\r\n    const getTotalQuantity = () => {\r\n        return quantity.map(quantity => quantity.totalQuantity)\r\n    };\r\n    const totalQuantityYTD = getTotalQuantity();\r\n\r\n    //Total Expenditure by Department YTD\r\n    const getTotalExpenditure = () => {\r\n        return price.map(price => price.totalPrice.toFixed(2))\r\n    };\r\n    const totalExpenditureYTD = getTotalExpenditure();\r\n\r\n    //Monthly Quantity YTD\r\n    const getMonthlyQuantity = () => {\r\n        return month.map(month => month.monthlyTotalQuantity)\r\n    };\r\n    const monthlyQuantityYTD = getMonthlyQuantity()\r\n\r\n    //Monthly Expenditure YTD\r\n    const getMonthlyExpenditure = () => {\r\n        return month.map(month => month.monthlyTotalPrice.toFixed(2))\r\n    };\r\n    const monthlyExpenditureYTD = getMonthlyExpenditure()\r\n\r\n    let convertedQuantityDepartments = quantity.map(quantity => {\r\n        switch (quantity.departmentId) {\r\n            case 1:\r\n                return \"Administrative Services\";\r\n            case 2:\r\n                return \"Anesthetics\";\r\n            case 3:\r\n                return \"Billing\";\r\n            case 4:\r\n                return \"Cardiology\";\r\n            case 5:\r\n                return \"Dermatology\";\r\n            case 6:\r\n                return \"Ear, Nose, and Throat (ENT)\";\r\n            case 7:\r\n                return \"Emergency Department (ED)\";\r\n            case 8:\r\n                return \"Environmental Services\";\r\n            case 9:\r\n                return \"Gastroenterology\";\r\n            case 10:\r\n                return \"Hematology\";\r\n            case 11:\r\n                return \"Human Resources (HR)\";\r\n            case 12:\r\n                return \"Imaging and Radiology\";\r\n            case 13:\r\n                return \"Information Technology (IT)\";\r\n            case 14:\r\n                return \"Intensive Care Unit (ICU)\";\r\n            case 15:\r\n                return \"Materials Management\";\r\n            case 16:\r\n                return \"Neonatal\";\r\n            case 17:\r\n                return \"Neurology\";\r\n            case 18:\r\n                return \"Nutrition and Dietics\";\r\n            case 19:\r\n                return \"Oncology\";\r\n            case 20:\r\n                return \"Orthopedics\";\r\n            case 21:\r\n                return \"Pharmacy\";\r\n            case 22:\r\n                return \"Physiotherapy\";\r\n            case 23:\r\n                return \"Records and Reception\";\r\n            case 24:\r\n                return \"Surgery\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    })\r\n\r\n    let convertedPriceDepartments = price.map(price => {\r\n        switch (price.departmentId) {\r\n            case 1:\r\n                return \"Administrative Services\";\r\n            case 2:\r\n                return \"Anesthetics\";\r\n            case 3:\r\n                return \"Billing\";\r\n            case 4:\r\n                return \"Cardiology\";\r\n            case 5:\r\n                return \"Dermatology\";\r\n            case 6:\r\n                return \"Ear, Nose, and Throat (ENT)\";\r\n            case 7:\r\n                return \"Emergency Department (ED)\";\r\n            case 8:\r\n                return \"Environmental Services\";\r\n            case 9:\r\n                return \"Gastroenterology\";\r\n            case 10:\r\n                return \"Hematology\";\r\n            case 11:\r\n                return \"Human Resources (HR)\";\r\n            case 12:\r\n                return \"Imaging and Radiology\";\r\n            case 13:\r\n                return \"Information Technology (IT)\";\r\n            case 14:\r\n                return \"Intensive Care Unit (ICU)\";\r\n            case 15:\r\n                return \"Materials Management\";\r\n            case 16:\r\n                return \"Neonatal\";\r\n            case 17:\r\n                return \"Neurology\";\r\n            case 18:\r\n                return \"Nutrition and Dietics\";\r\n            case 19:\r\n                return \"Oncology\";\r\n            case 20:\r\n                return \"Orthopedics\";\r\n            case 21:\r\n                return \"Pharmacy\";\r\n            case 22:\r\n                return \"Physiotherapy\";\r\n            case 23:\r\n                return \"Records and Reception\";\r\n            case 24:\r\n                return \"Surgery\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    })\r\n\r\n    let convertedMonths = month.map(month => {\r\n        switch (month.dateReceived) {\r\n            case 1:\r\n                return \"January\";\r\n            case 2:\r\n                return \"February\";\r\n            case 3:\r\n                return \"March\";\r\n            case 4:\r\n                return \"April\";\r\n            case 5:\r\n                return \"May\";\r\n            case 6:\r\n                return \"June\";\r\n            case 7:\r\n                return \"July\";\r\n            case 8:\r\n                return \"August\";\r\n            case 9:\r\n                return \"September\";\r\n            case 10:\r\n                return \"October\";\r\n            case 11:\r\n                return \"November\";\r\n            case 12:\r\n                return \"December\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Navbar bg=\"dark\" variant=\"tabs\">\r\n                    <img id=\"nucleusLogo\" src=\"\\Images\\NucleusLogo.png\" alt=\"Nucleus Logo\" />\r\n                    <Button\r\n                        id=\"navLinks\"\r\n                        className=\"mt-1 ml-5\"\r\n                        onClick={() => {\r\n                            history.push(`/`)\r\n                        }}\r\n                        variant=\"outline\"\r\n                    >Inventory</Button>\r\n                    <Nav fixed=\"top\" className=\"mr-auto\"></Nav>\r\n                    <Button\r\n                        id=\"navLinks\"\r\n                        className=\"mt-1 mr-5\"\r\n                        variant=\"outline\"\r\n                        onClick={logoutAndReturn}\r\n                    >Logout\r\n                    </Button>\r\n                </Navbar>\r\n            </Container>\r\n            <Row>\r\n                <div id=\"chartStyling\" style={{ height: 750, width: 900, marginLeft: 30, marginRight: 70 }}>\r\n                    <Row className=\"justify-content-md-left\" style={{ marginTop: -12, marginLeft: 15 }}>\r\n                        <label\r\n                            className=\"quantityFloor text-left mr-n1\"\r\n                            id=\"input\"\r\n                            style={{ width: 700, height: 5, marginTop: 2, fontSize: 18 }}\r\n                        >Quantity Floor <span style={{ fontSize: 17 }}>(enter a number to hide departments with fewer items)</span>:\r\n                        </label>\r\n                        <FormControl\r\n                            type=\"text\"\r\n                            className=\"quantityFloorInput mb-4 ml-n5\"\r\n                            id=\"input\"\r\n                            name=\"quantityFloorValue\"\r\n                            onKeyUp={\r\n                                (keyEvent) => {\r\n                                    setTotalQuantityYTD(keyEvent.target.value)\r\n                                }\r\n                            }\r\n                            defaultValue={0}\r\n                            style={{ width: 75, height: 35, fontSize: 18 }}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Doughnut\r\n                        data={{\r\n                            labels: convertedQuantityDepartments,\r\n                            datasets: [{\r\n                                label: [\"Total # of Items by Department YTD\"],\r\n                                data: totalQuantityYTD,\r\n                                backgroundColor: [\r\n                                    'rgba(255, 0, 0, 1)',\r\n                                    'rgba(0, 0, 255, .5)',\r\n                                    'rgba(253, 150, 64, 1)',\r\n                                    'rgba(250, 8, 126, .9)',\r\n                                    'rgba(54, 162, 235, 1)',\r\n                                    'rgba(75, 192, 192, 1)',\r\n                                    'rgba(136, 8, 255, 1)',\r\n                                    'rgba(123, 224, 0, 1)',\r\n                                    'rgba(80, 150, 75, .5)',\r\n                                    'rgba(40, 75, 150, 1)',\r\n                                    'rgba(200, 150, 150, .6)',\r\n                                    'rgba(80, 100, 50, 1)',\r\n                                    'rgba(248, 255, 8, 1)',\r\n                                    'rgba(153, 102, 6, 1)',\r\n                                    'rgba(138, 177, 150, 1)',\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                    'rgba(0, 255, 0, 1)',\r\n                                    'rgba(255, 206, 86, 1)',\r\n                                    'rgba(0, 0, 255, 1)',\r\n                                    'rgba(160, 166, 5, .6)',\r\n                                    'rgba(20, 75, 5, .6)',\r\n                                    'rgba(160, 5, 5, 1)',\r\n                                    'rgba(90, 90, 90, .6)',\r\n                                    'rgba(200, 125, 150, 1)',\r\n                                ]\r\n                            }],\r\n                        }}\r\n                        options={{\r\n                            responsive: true,\r\n                            maintainAspectRatio: false,\r\n                            title: {\r\n                                display: true,\r\n                                text: \"Total # of Items by Department YTD\",\r\n                                fontColor: 'black',\r\n                                fontSize: '18',\r\n                                padding: '5'\r\n                            },\r\n                            legend: {\r\n                                display: true,\r\n                                position: 'left',\r\n                            }\r\n                        }}\r\n                    ></Doughnut>\r\n                </div>\r\n\r\n                <div id=\"chartStyling\" style={{ height: 750, width: 900 }}>\r\n                    <Row className=\"justify-content-md-left\" style={{ marginTop: -12, marginLeft: 15 }}>\r\n                        <label\r\n                            className=\"priceFloor text-left mr-n1\"\r\n                            id=\"input\"\r\n                            style={{ width: 725, height: 5, marginTop: 2, fontSize: 18 }}\r\n                        >Price Floor <span style={{ fontSize: 17 }}>(enter a number to hide departments with lower expenditures)</span>:\r\n                        </label>\r\n                        <FormControl\r\n                            type=\"text\"\r\n                            className=\"priceFloorInput mb-4 ml-n5\"\r\n                            id=\"input\"\r\n                            name=\"quantityFloorValue\"\r\n                            onKeyUp={\r\n                                (keyEvent) => {\r\n                                    setTotalPriceYTD(keyEvent.target.value)\r\n                                }\r\n                            }\r\n                            defaultValue={0}\r\n                            style={{ width: 75, height: 35, fontSize: 18 }}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Pie\r\n                        data={{\r\n                            labels: convertedPriceDepartments,\r\n                            datasets: [{\r\n                                label: 'Expenditure $',\r\n                                data: totalExpenditureYTD,\r\n                                backgroundColor: [\r\n                                    'rgba(255, 0, 0, 1)',\r\n                                    'rgba(0, 0, 255, .5)',\r\n                                    'rgba(253, 150, 64, 1)',\r\n                                    'rgba(250, 8, 126, .9)',\r\n                                    'rgba(54, 162, 235, 1)',\r\n                                    'rgba(75, 192, 192, 1)',\r\n                                    'rgba(136, 8, 255, 1)',\r\n                                    'rgba(123, 224, 0, 1)',\r\n                                    'rgba(80, 150, 75, .5)',\r\n                                    'rgba(40, 75, 150, 1)',\r\n                                    'rgba(200, 150, 150, .6)',\r\n                                    'rgba(80, 100, 50, 1)',\r\n                                    'rgba(248, 255, 8, 1)',\r\n                                    'rgba(153, 102, 6, 1)',\r\n                                    'rgba(138, 177, 150, 1)',\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                    'rgba(0, 255, 0, 1)',\r\n                                    'rgba(255, 206, 86, 1)',\r\n                                    'rgba(0, 0, 255, 1)',\r\n                                    'rgba(160, 166, 5, .6)',\r\n                                    'rgba(20, 75, 5, .6)',\r\n                                    'rgba(160, 5, 5, 1)',\r\n                                    'rgba(90, 90, 90, .6)',\r\n                                    'rgba(200, 125, 150, 1)',\r\n                                ]\r\n                            }]\r\n                        }}\r\n                        options={{\r\n                            responsive: true,\r\n                            maintainAspectRatio: false,\r\n                            title: {\r\n                                display: true,\r\n                                text: \"Total Expenditure by Department YTD\",\r\n                                fontColor: 'black',\r\n                                fontSize: '18'\r\n                            },\r\n                            legend: {\r\n                                display: true,\r\n                                position: 'left',\r\n                            }\r\n                        }}\r\n                    ></Pie>\r\n                </div>\r\n            </Row>\r\n\r\n            <Row style={{ marginTop: 25, marginBottom: 75 }}>\r\n                <div id=\"chartStyling\" style={{ height: 600, width: 900, marginLeft: 30, marginRight: 70 }}>\r\n                    <Bar\r\n                        data={{\r\n                            labels: convertedMonths,\r\n                            datasets: [{\r\n                                label: '# of Items',\r\n                                data: monthlyQuantityYTD,\r\n                                backgroundColor: [\r\n                                    'rgba(255, 0, 0, 1)',\r\n                                    'rgba(0, 0, 255, .5)',\r\n                                    'rgba(253, 150, 64, 1)',\r\n                                    'rgba(250, 8, 126, .9)',\r\n                                    'rgba(54, 162, 235, 1)',\r\n                                    'rgba(75, 192, 192, 1)',\r\n                                    'rgba(136, 8, 255, 1)',\r\n                                    'rgba(123, 224, 0, 1)',\r\n                                    'rgba(80, 150, 75, .5)',\r\n                                    'rgba(40, 75, 150, 1)',\r\n                                    'rgba(200, 150, 150, .6)',\r\n                                    'rgba(80, 100, 50, 1)',\r\n                                    'rgba(248, 255, 8, 1)',\r\n                                    'rgba(153, 102, 6, 1)',\r\n                                    'rgba(138, 177, 150, 1)',\r\n                                    'rgba(255, 99, 132, 1)',\r\n                                    'rgba(0, 255, 0, 1)',\r\n                                    'rgba(255, 206, 86, 1)',\r\n                                    'rgba(0, 0, 255, 1)',\r\n                                    'rgba(160, 166, 5, .6)',\r\n                                    'rgba(20, 75, 5, .6)',\r\n                                    'rgba(160, 5, 5, 1)',\r\n                                    'rgba(90, 90, 90, .6)',\r\n                                    'rgba(200, 125, 150, 1)',\r\n                                ]\r\n                            }]\r\n                        }}\r\n                        options={{\r\n                            responsive: true,\r\n                            maintainAspectRatio: false,\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Total Hospital Inventory by Month',\r\n                                fontColor: 'black',\r\n                                fontSize: '18',\r\n                                padding: '5'\r\n                            },\r\n                            legend: {\r\n                                display: false\r\n                            }\r\n                        }}\r\n                    ></Bar>\r\n                </div>\r\n\r\n                <div id=\"chartStyling\" style={{ height: 600, width: 900 }}>\r\n                    <Line\r\n                        data={{\r\n                            labels: convertedMonths,\r\n                            datasets: [{\r\n                                label: 'Expenditure $',\r\n                                data: monthlyExpenditureYTD,\r\n                                backgroundColor: [\r\n                                    'rgba(54, 162, 235, .7)',\r\n                                ]\r\n                            }]\r\n                        }}\r\n                        options={{\r\n                            responsive: true,\r\n                            maintainAspectRatio: false,\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Total Hospital Expenditure by Month',\r\n                                fontColor: 'black',\r\n                                fontSize: '18',\r\n                                padding: '5'\r\n                            },\r\n                            legend: {\r\n                                display: false\r\n                            }\r\n                        }}\r\n                    ></Line>\r\n                </div>\r\n            </Row>\r\n            <Row></Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\ItemForm.js",["57","58","59","60","61"],"C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\EditProfile.js",["62"],"import React, { useContext, useEffect, useRef, useState } from \"react\"\r\nimport { useHistory, useParams } from \"react-router-dom\"\r\nimport { Button, Col, Jumbotron, Row } from \"react-bootstrap\"\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./Inventory.css\";\r\n\r\nconst EditProfile = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const { id } = useParams();\r\n\r\n    const { getToken, getCurrentUser } = useContext(UserProfileContext);\r\n\r\n    const currentUser = getCurrentUser();\r\n\r\n    const firstName = useRef();\r\n    const lastName = useRef();\r\n    const displayName = useRef();\r\n\r\n    const [user, setUser] = useState({});\r\n\r\n    /*on initial page load, authenticates using the firebase bearer token and then performs a GET operation that retrieves from SQL Server\r\n    the user profile object that has an id value matching the number in the route parameter. After retrieving that user profile object, \r\n    this hook then uses the useState hook to initialize the user variable with the user profile object.*/\r\n    useEffect(() => {\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/userprofile/editprofile/${id}`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                })\r\n            )\r\n            .then((res) => res.json())\r\n            .then((user) => {\r\n                setUser(user);\r\n            })\r\n    }, [id]);\r\n\r\n    /*when invoked, initializes the newUserProfile variable with a new user profile object containing values for its required properties. \r\n    The values for those properties are set by the firstName, lastName, and displayName inputs in addition to values from the database for \r\n    unchanged properties. Then this function carries out an authenticated PUT operation using the firebase bearer token for auth. After \r\n    that PUT operation concludes, the function finally navigates the user to the home page using the history hook*/\r\n    const editProfile = () => {\r\n        const newUserProfile = {\r\n            id: user.id,\r\n            FirebaseUserId: user.firebaseUserId,\r\n            department: user.department,\r\n            firstName: firstName.current.value,\r\n            lastName: lastName.current.value,\r\n            displayName: displayName.current.value,\r\n            email: user.email,\r\n            dateRegistered: user.dateRegistered,\r\n            userTypeId: user.userTypeId,\r\n            IsActive: true\r\n        };\r\n        getToken().then((token) =>\r\n            fetch(`/api/userprofile/editprofile/${user.id}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(newUserProfile),\r\n            }).then(() => {\r\n                history.push(`/`);\r\n            })\r\n        );\r\n    };\r\n\r\n    return (\r\n        /*ternary evaluation that checks whether the user's id in the SQL Server database, as returned by the above useEffect hook,\r\n        matches the currentUser's id as listed in local session storage*/\r\n        user.id === currentUser.id ?\r\n            //page returned if the route parameter matches the current user's id\r\n            <>\r\n                <h1 className=\"my-5\">Edit Profile</h1>\r\n                <hr />\r\n                <Row>\r\n                    <Col></Col>\r\n                    <Col className=\"ml-5\" id=\"textInputs\">\r\n                        {/* First Name input */}\r\n                        <p id=\"requiredProfile\" className=\"mb-1\"><i>* Required</i></p>\r\n                        <Row className=\"justify-content-md-left mb-4 mt-1\" >\r\n                            <label\r\n                                className=\"firstNameTitle text-left\"\r\n                                id=\"input\"\r\n                                style={{ height: 5, width: 200 }}\r\n                            >First Name:\r\n                            </label>\r\n                            <input\r\n                                className=\"firstNameInput ml-4\"\r\n                                defaultValue={user.firstName}\r\n                                id=\"input\"\r\n                                name=\"firstName\"\r\n                                ref={firstName}\r\n                                style={{ height: 35, width: 400 }}\r\n                                type=\"text\"\r\n                            />\r\n                        </Row>\r\n\r\n                        {/* Last Name input */}\r\n                        <p id=\"requiredProfile\" className=\"mb-1\"><i>* Required</i></p>\r\n                        <Row className=\"justify-content-md-left mb-4 mt-1\" >\r\n                            <label\r\n                                className=\"lastNameTitle text-left\"\r\n                                id=\"input\"\r\n                                style={{ height: 5, width: 200 }}\r\n                            >Last Name:\r\n                            </label>\r\n                            <input\r\n                                className=\"lastNameInput ml-4\"\r\n                                defaultValue={user.lastName}\r\n                                id=\"input\"\r\n                                name=\"lastName\"\r\n                                ref={lastName}\r\n                                style={{ height: 35, width: 400 }}\r\n                                type=\"text\"\r\n                            />\r\n                        </Row>\r\n\r\n                        <p id=\"requiredProfile\" className=\"mb-1\"><i>* Required</i></p>\r\n                        {/* Display Name input */}\r\n                        <Row className=\"justify-content-md-left mb-4 mt-1\">\r\n                            <label\r\n                                className=\"displayName text-left\"\r\n                                id=\"input\"\r\n                                style={{ height: 5, width: 200 }}\r\n                            >Display Name:\r\n                            </label>\r\n                            <input\r\n                                className=\"displayName ml-4\"\r\n                                defaultValue={user.displayName}\r\n                                id=\"input\"\r\n                                name=\"displayName\"\r\n                                ref={displayName}\r\n                                style={{ height: 35, width: 400 }}\r\n                                type=\"text\"\r\n                            />\r\n                        </Row>\r\n\r\n                        <Row className=\"justify-content-md-left mb-4\" style={{ marginTop: 20 }}>\r\n                            {/* Save Edits Button */}\r\n                            <Button\r\n                                id=\"input\"\r\n                                onClick={item => {\r\n                                    item.preventDefault()\r\n                                    editProfile();\r\n                                    history.push(`/`)\r\n                                }}\r\n                                style={{ marginLeft: 75, width: 150 }}\r\n                                type=\"button\"\r\n                                variant=\"success\"\r\n                            >Save Edits\r\n                            </Button>\r\n\r\n                            {/* Cancel Button */}\r\n                            <Button\r\n                                id=\"input\"\r\n                                onClick={() => {\r\n                                    history.push(`/`)\r\n                                }}\r\n                                style={{ marginLeft: 150, width: 150 }}\r\n                                type=\"submit\"\r\n                                variant=\"danger\"\r\n                            >Cancel\r\n                            </Button>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n            </> :\r\n            //404 page returned if the user enters a route parameter that does not match the current user's id\r\n            <>\r\n                <Jumbotron>\r\n                    <h1>404 Not Found</h1>\r\n                </Jumbotron>\r\n                <Row style={{ height: 100 }}></Row>\r\n                <Col md={4} style={{ width: 550 }}></Col>\r\n                <Col md={2}>\r\n                    <Jumbotron style={{ width: 800, height: 225, textAlign: \"center\" }}>\r\n                        <h2>The page you're looking for could not be found.</h2>\r\n                        <Button\r\n                            className=\"mt-5\"\r\n                            onClick={() => history.push(`/`)}\r\n                            style={{ height: 70, width: 300, fontSize: 18 }}\r\n                        >\r\n                            Return to Homepage\r\n                        </Button>\r\n                    </Jumbotron>\r\n                </Col>\r\n                <Col md={2}></Col>\r\n            </>\r\n    );\r\n}\r\n\r\nexport default EditProfile;","C:\\Users\\braxt\\workspace\\Capstone-Nucleus\\Capstone-Nucleus\\Capstone-Nucleus\\client\\src\\pages\\ItemCard.js",["63","64"],"import React, { useContext } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { Button, Col, Row } from \"react-bootstrap\"\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\n\r\nconst ItemCard = ({ item, getItems }) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const { getToken, getCurrentUser } = useContext(UserProfileContext);\r\n\r\n    const currentUser = getCurrentUser();\r\n\r\n    /*When invoked, this deleteItem function first initializes the deletingItem variable with the id property (that property \r\n    is declared the item.id value). Then, the fetch call is made with the firebase bearer token inserted into the header for auth. \r\n    The fetch call passes to the controller the item id value of the item to be deleted, and that delete operation is handled \r\n    server-side with no response returned. Then the getItems function is invoked to refresh the item card components, which will \r\n    no longer contain the item that was just deleted.*/\r\n    const deleteItem = () => {\r\n        const deletingItem = { id: item.id }\r\n        getToken().then((token) =>\r\n            fetch(`/api/item/deleteitem/${item.id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(deletingItem)\r\n            }).then(() => {\r\n                getItems()\r\n            })\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row >\r\n                <Col md={2} id=\"itemPicture\" >\r\n                    <a href={item.itemPicture} target=\"_blank\">\r\n                        <img alt=\"Item Picture\" src={item.itemPicture} style={{ maxWidth: 304, maxHeight: 150 }} />\r\n                    </a>\r\n                </Col>\r\n                <Col className=\"overflow-auto\" id=\"itemDepartment\" md={2}>{item.department.name}</Col>\r\n                <Col className=\"overflow-auto\" id=\"itemVendor\" md={1}>{item.vendorName}</Col>\r\n                <Col className=\"overflow-auto\" id=\"itemName\" md={2}>{item.itemName}</Col>\r\n                <Col className=\"overflow-auto\" id=\"itemSKU\" md={1}>{item.itemSKU}</Col>\r\n                <Col className=\"overflow-auto\" id=\"itemPrice\" md={1}>${item.unitPrice}</Col>\r\n                <Col className=\"overflow-auto\" id=\"itemPrice\" md={1}>${item.totalPrice.toFixed(2)}</Col>\r\n                <Col className=\"overflow-auto\" id=\"itemQuantity\" md={1}>{item.quantity}</Col>\r\n                <Col id=\"itemEditAndDeleteButtons\">\r\n                    {/*Evaluates whether the user has a user role of 1, which is a Clerk. If the user is a Clerk, then nothing renders.\r\n                    If the user is not a Clerk, then the Edit and Delete buttons defined below will render.*/}\r\n                    {currentUser.userTypeId !== 1 ?\r\n                        <Row className=\"itemEditAndDeleteButtons\">\r\n                            <Button\r\n                                onClick={() => {\r\n                                    history.push(`/edititem/${item.id}`)\r\n                                }}\r\n                                id=\"itemEditButton\"\r\n                                type=\"button\"\r\n                                variant=\"info\"\r\n                            >Edit\r\n                            </Button>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    deleteItem()\r\n                                }}\r\n                                id=\"itemDeleteButton\"\r\n                                variant=\"danger\"\r\n                            >Delete\r\n                            </Button>\r\n                        </Row>\r\n                        : \"\"\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemCard;",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":80,"column":8,"nodeType":"71","endLine":80,"endColumn":31,"suggestions":"72"},{"ruleId":"69","severity":1,"message":"73","line":72,"column":8,"nodeType":"71","endLine":72,"endColumn":10,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":95,"column":47,"nodeType":"77","messageId":"78","endLine":95,"endColumn":64},{"ruleId":"75","severity":1,"message":"76","line":97,"column":46,"nodeType":"77","messageId":"78","endLine":97,"endColumn":62},{"ruleId":"69","severity":1,"message":"79","line":127,"column":8,"nodeType":"71","endLine":127,"endColumn":105,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":153,"column":36,"nodeType":"83","messageId":"84","endLine":153,"endColumn":38},{"ruleId":"69","severity":1,"message":"85","line":41,"column":8,"nodeType":"71","endLine":41,"endColumn":12,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":39,"column":21,"nodeType":"89","endLine":39,"endColumn":64},{"ruleId":"90","severity":1,"message":"91","line":40,"column":25,"nodeType":"89","endLine":40,"endColumn":116},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'priceYTD'. Either include it or remove the dependency array.","ArrayExpression",["94"],"React Hook useEffect has a missing dependency: 'itemId'. Either include it or remove the dependency array.",["95"],"use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","React Hook useEffect has missing dependencies: 'editUniqueItem' and 'vendorName'. Either include them or remove the dependency array.",["96"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'getToken'. Either include it or remove the dependency array.",["97"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [priceYTD, quantity, quantityYTD]",{"range":"106","text":"107"},"Update the dependencies array to be: [itemId]",{"range":"108","text":"109"},"Update the dependencies array to be: [DepartmentId, editCheck, getToken, history, itemName, ItemPicture, itemSKU, Quantity, UnitPrice, editUniqueItem, vendorName]",{"range":"110","text":"111"},"Update the dependencies array to be: [getToken, id]",{"range":"112","text":"113"},[2754,2777],"[priceYTD, quantity, quantityYTD]",[3330,3332],"[itemId]",[6118,6215],"[DepartmentId, editCheck, getToken, history, itemName, ItemPicture, itemSKU, Quantity, UnitPrice, editUniqueItem, vendorName]",[1547,1551],"[getToken, id]"]